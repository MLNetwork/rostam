// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph_profile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_graph_5fprofile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_graph_5fprofile_2eproto
#include <limits>
#include <string>
#include <google/protobuf/port_def.inc>

#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif
#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

#define PROTOBUF_INTERNAL_EXPORT_graph_5fprofile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_graph_5fprofile_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
  PROTOBUF_SECTION_VARIABLE( protodesc_cold );
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
  PROTOBUF_SECTION_VARIABLE( protodesc_cold );
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
  PROTOBUF_SECTION_VARIABLE( protodesc_cold );
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};

extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_graph_5fprofile_2eproto;

namespace graph_profile {
class Profile;

class ProfileDefaultTypeInternal;

extern ProfileDefaultTypeInternal _Profile_default_instance_;

class Profile_Adjacents;

class Profile_AdjacentsDefaultTypeInternal;

extern Profile_AdjacentsDefaultTypeInternal _Profile_Adjacents_default_instance_;

class Profile_Op;

class Profile_OpDefaultTypeInternal;

extern Profile_OpDefaultTypeInternal _Profile_Op_default_instance_;
}  // namespace graph_profile
PROTOBUF_NAMESPACE_OPEN
template< >
::graph_profile::Profile *Arena::CreateMaybeMessage< ::graph_profile::Profile >( Arena * );

template< >
::graph_profile::Profile_Adjacents *Arena::CreateMaybeMessage< ::graph_profile::Profile_Adjacents >( Arena * );

template< >
::graph_profile::Profile_Op *Arena::CreateMaybeMessage< ::graph_profile::Profile_Op >( Arena * );
PROTOBUF_NAMESPACE_CLOSE
namespace graph_profile {
enum Profile_Op_MemType : int {
  Profile_Op_MemType_TENSOR = 0,
  Profile_Op_MemType_WRITEVARIABLE = 1,
  Profile_Op_MemType_READVARIABLE = 2,
  Profile_Op_MemType_CONSTANT = 3,
  Profile_Op_MemType_Profile_Op_MemType_INT_MIN_SENTINEL_DO_NOT_USE_ =
  std::numeric_limits< ::PROTOBUF_NAMESPACE_ID::int32 >::min( ),
  Profile_Op_MemType_Profile_Op_MemType_INT_MAX_SENTINEL_DO_NOT_USE_ =
  std::numeric_limits< ::PROTOBUF_NAMESPACE_ID::int32 >::max( )
};

bool Profile_Op_MemType_IsValid( int value );

constexpr Profile_Op_MemType Profile_Op_MemType_MemType_MIN = Profile_Op_MemType_TENSOR;

constexpr Profile_Op_MemType Profile_Op_MemType_MemType_MAX = Profile_Op_MemType_CONSTANT;

constexpr int Profile_Op_MemType_MemType_ARRAYSIZE = Profile_Op_MemType_MemType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *Profile_Op_MemType_descriptor( );

template< typename T >
inline const std::string &Profile_Op_MemType_Name( T enum_t_value ) {
  static_assert( ::std::is_same< T, Profile_Op_MemType >::value ||
                     ::std::is_integral< T >::value,
                 "Incorrect type passed to function Profile_Op_MemType_Name." );
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
      Profile_Op_MemType_descriptor( ), enum_t_value );
}

inline bool Profile_Op_MemType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Profile_Op_MemType *value ) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum< Profile_Op_MemType >(
      Profile_Op_MemType_descriptor( ), name, value );
}

enum Profile_Op_OpType : int {
  Profile_Op_OpType_COMPUTE = 0,
  Profile_Op_OpType_MEMORY = 1,
  Profile_Op_OpType_CONTROLDEPENDENCY = 2,
  Profile_Op_OpType_Profile_Op_OpType_INT_MIN_SENTINEL_DO_NOT_USE_ =
  std::numeric_limits< ::PROTOBUF_NAMESPACE_ID::int32 >::min( ),
  Profile_Op_OpType_Profile_Op_OpType_INT_MAX_SENTINEL_DO_NOT_USE_ =
  std::numeric_limits< ::PROTOBUF_NAMESPACE_ID::int32 >::max( )
};

bool Profile_Op_OpType_IsValid( int value );

constexpr Profile_Op_OpType Profile_Op_OpType_OpType_MIN = Profile_Op_OpType_COMPUTE;

constexpr Profile_Op_OpType Profile_Op_OpType_OpType_MAX = Profile_Op_OpType_CONTROLDEPENDENCY;

constexpr int Profile_Op_OpType_OpType_ARRAYSIZE = Profile_Op_OpType_OpType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *Profile_Op_OpType_descriptor( );

template< typename T >
inline const std::string &Profile_Op_OpType_Name( T enum_t_value ) {
  static_assert( ::std::is_same< T, Profile_Op_OpType >::value ||
                     ::std::is_integral< T >::value,
                 "Incorrect type passed to function Profile_Op_OpType_Name." );
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
      Profile_Op_OpType_descriptor( ), enum_t_value );
}

inline bool Profile_Op_OpType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Profile_Op_OpType *value ) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum< Profile_Op_OpType >(
      Profile_Op_OpType_descriptor( ), name, value );
}
// ===================================================================

class Profile_Op PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph_profile.Profile.Op) */ {
 public:
  inline Profile_Op( ) : Profile_Op( nullptr ) { }

  virtual ~Profile_Op( );

  Profile_Op( const Profile_Op &from );

  Profile_Op( Profile_Op &&from ) noexcept
      : Profile_Op( ) {
    *this = ::std::move( from );
  }

  inline Profile_Op &operator=( const Profile_Op &from ) {
    CopyFrom( from );
    return *this;
  }

  inline Profile_Op &operator=( Profile_Op &&from ) noexcept {
    if ( GetArena( ) == from.GetArena( )) {
      if ( this != &from ) InternalSwap( &from );
    } else {
      CopyFrom( from );
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor( ) {
    return GetDescriptor( );
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor( ) {
    return GetMetadataStatic( ).descriptor;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection( ) {
    return GetMetadataStatic( ).reflection;
  }

  static const Profile_Op &default_instance( );

  static inline const Profile_Op *internal_default_instance( ) {
    return reinterpret_cast<const Profile_Op *>(
        &_Profile_Op_default_instance_);
  }

  static constexpr int kIndexInFileMessages =
      0;

  friend void swap( Profile_Op &a, Profile_Op &b ) {
    a.Swap( &b );
  }

  inline void Swap( Profile_Op *other ) {
    if ( other == this ) return;
    if ( GetArena( ) == other->GetArena( )) {
      InternalSwap( other );
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap( this, other );
    }
  }

  void UnsafeArenaSwap( Profile_Op *other ) {
    if ( other == this ) return;
        GOOGLE_DCHECK( GetArena( ) == other->GetArena( ));
    InternalSwap( other );
  }

  // implements Message ----------------------------------------------

  inline Profile_Op *New( ) const final {
    return CreateMaybeMessage< Profile_Op >( nullptr );
  }

  Profile_Op *New( ::PROTOBUF_NAMESPACE_ID::Arena *arena ) const final {
    return CreateMaybeMessage< Profile_Op >( arena );
  }

  void CopyFrom( const ::PROTOBUF_NAMESPACE_ID::Message &from ) final;

  void MergeFrom( const ::PROTOBUF_NAMESPACE_ID::Message &from ) final;

  void CopyFrom( const Profile_Op &from );

  void MergeFrom( const Profile_Op &from );

  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear( ) final;

  bool IsInitialized( ) const final;

  size_t ByteSizeLong( ) const final;

  const char *_InternalParse( const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx ) final;

  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream ) const final;

  int GetCachedSize( ) const final { return _cached_size_.Get( ); }

 private:
  inline void SharedCtor( );

  inline void SharedDtor( );

  void SetCachedSize( int size ) const final;

  void InternalSwap( Profile_Op *other );

  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName( ) {
    return "graph_profile.Profile.Op";
  }

 protected:
  explicit Profile_Op( ::PROTOBUF_NAMESPACE_ID::Arena *arena );

 private:
  static void ArenaDtor( void *object );

  inline void RegisterArenaDtor( ::PROTOBUF_NAMESPACE_ID::Arena *arena );

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata( ) const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic( ) {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors( &::descriptor_table_graph_5fprofile_2eproto );
    return ::descriptor_table_graph_5fprofile_2eproto.file_level_metadata[ kIndexInFileMessages ];
  }

 public:

  // nested types ----------------------------------------------------

  typedef Profile_Op_MemType MemType;
  static constexpr MemType TENSOR =
      Profile_Op_MemType_TENSOR;
  static constexpr MemType WRITEVARIABLE =
      Profile_Op_MemType_WRITEVARIABLE;
  static constexpr MemType READVARIABLE =
      Profile_Op_MemType_READVARIABLE;
  static constexpr MemType CONSTANT =
      Profile_Op_MemType_CONSTANT;

  static inline bool MemType_IsValid( int value ) {
    return Profile_Op_MemType_IsValid( value );
  }

  static constexpr MemType MemType_MIN =
      Profile_Op_MemType_MemType_MIN;
  static constexpr MemType MemType_MAX =
      Profile_Op_MemType_MemType_MAX;
  static constexpr int MemType_ARRAYSIZE =
      Profile_Op_MemType_MemType_ARRAYSIZE;

  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *
  MemType_descriptor( ) {
    return Profile_Op_MemType_descriptor( );
  }

  template< typename T >
  static inline const std::string &MemType_Name( T enum_t_value ) {
    static_assert( ::std::is_same< T, MemType >::value ||
                       ::std::is_integral< T >::value,
                   "Incorrect type passed to function MemType_Name." );
    return Profile_Op_MemType_Name( enum_t_value );
  }

  static inline bool MemType_Parse( ::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
                                    MemType *value ) {
    return Profile_Op_MemType_Parse( name, value );
  }

  typedef Profile_Op_OpType OpType;
  static constexpr OpType COMPUTE =
      Profile_Op_OpType_COMPUTE;
  static constexpr OpType MEMORY =
      Profile_Op_OpType_MEMORY;
  static constexpr OpType CONTROLDEPENDENCY =
      Profile_Op_OpType_CONTROLDEPENDENCY;

  static inline bool OpType_IsValid( int value ) {
    return Profile_Op_OpType_IsValid( value );
  }

  static constexpr OpType OpType_MIN =
      Profile_Op_OpType_OpType_MIN;
  static constexpr OpType OpType_MAX =
      Profile_Op_OpType_OpType_MAX;
  static constexpr int OpType_ARRAYSIZE =
      Profile_Op_OpType_OpType_ARRAYSIZE;

  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *
  OpType_descriptor( ) {
    return Profile_Op_OpType_descriptor( );
  }

  template< typename T >
  static inline const std::string &OpType_Name( T enum_t_value ) {
    static_assert( ::std::is_same< T, OpType >::value ||
                       ::std::is_integral< T >::value,
                   "Incorrect type passed to function OpType_Name." );
    return Profile_Op_OpType_Name( enum_t_value );
  }

  static inline bool OpType_Parse( ::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
                                   OpType *value ) {
    return Profile_Op_OpType_Parse( name, value );
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCompTimeUsFieldNumber = 2,
    kNumBytesFieldNumber = 3,
    kOpTypeFieldNumber = 4,
    kMemTypeFieldNumber = 5,
    kOutputBytesFieldNumber = 6,
  };

  // string name = 1;
  void clear_name( );

  const std::string &name( ) const;

  void set_name( const std::string &value );

  void set_name( std::string &&value );

  void set_name( const char *value );

  void set_name( const char *value, size_t size );

  std::string *mutable_name( );

  std::string *release_name( );

  void set_allocated_name( std::string *name );

 private:
  const std::string &_internal_name( ) const;

  void _internal_set_name( const std::string &value );

  std::string *_internal_mutable_name( );

 public:
  // uint32 comp_time_us = 2;
  void clear_comp_time_us( );

  ::PROTOBUF_NAMESPACE_ID::uint32 comp_time_us( ) const;

  void set_comp_time_us( ::PROTOBUF_NAMESPACE_ID::uint32 value );

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_comp_time_us( ) const;

  void _internal_set_comp_time_us( ::PROTOBUF_NAMESPACE_ID::uint32 value );

 public:
  // uint32 num_bytes = 3;
  void clear_num_bytes( );

  ::PROTOBUF_NAMESPACE_ID::uint32 num_bytes( ) const;

  void set_num_bytes( ::PROTOBUF_NAMESPACE_ID::uint32 value );

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_bytes( ) const;

  void _internal_set_num_bytes( ::PROTOBUF_NAMESPACE_ID::uint32 value );

 public:
  // .graph_profile.Profile.Op.OpType op_type = 4;
  void clear_op_type( );

  ::graph_profile::Profile_Op_OpType op_type( ) const;

  void set_op_type( ::graph_profile::Profile_Op_OpType value );

 private:
  ::graph_profile::Profile_Op_OpType _internal_op_type( ) const;

  void _internal_set_op_type( ::graph_profile::Profile_Op_OpType value );

 public:
  // .graph_profile.Profile.Op.MemType mem_type = 5;
  void clear_mem_type( );

  ::graph_profile::Profile_Op_MemType mem_type( ) const;

  void set_mem_type( ::graph_profile::Profile_Op_MemType value );

 private:
  ::graph_profile::Profile_Op_MemType _internal_mem_type( ) const;

  void _internal_set_mem_type( ::graph_profile::Profile_Op_MemType value );

 public:
  // uint32 output_bytes = 6;
  void clear_output_bytes( );

  ::PROTOBUF_NAMESPACE_ID::uint32 output_bytes( ) const;

  void set_output_bytes( ::PROTOBUF_NAMESPACE_ID::uint32 value );

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_output_bytes( ) const;

  void _internal_set_output_bytes( ::PROTOBUF_NAMESPACE_ID::uint32 value );

 public:

  // @@protoc_insertion_point(class_scope:graph_profile.Profile.Op)
 private:
  class _Internal;

  template< typename T > friend
  class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 comp_time_us_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_bytes_;
  int op_type_;
  int mem_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 output_bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class Profile_Adjacents PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph_profile.Profile.Adjacents) */ {
 public:
  inline Profile_Adjacents( ) : Profile_Adjacents( nullptr ) { }

  virtual ~Profile_Adjacents( );

  Profile_Adjacents( const Profile_Adjacents &from );

  Profile_Adjacents( Profile_Adjacents &&from ) noexcept
      : Profile_Adjacents( ) {
    *this = ::std::move( from );
  }

  inline Profile_Adjacents &operator=( const Profile_Adjacents &from ) {
    CopyFrom( from );
    return *this;
  }

  inline Profile_Adjacents &operator=( Profile_Adjacents &&from ) noexcept {
    if ( GetArena( ) == from.GetArena( )) {
      if ( this != &from ) InternalSwap( &from );
    } else {
      CopyFrom( from );
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor( ) {
    return GetDescriptor( );
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor( ) {
    return GetMetadataStatic( ).descriptor;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection( ) {
    return GetMetadataStatic( ).reflection;
  }

  static const Profile_Adjacents &default_instance( );

  static inline const Profile_Adjacents *internal_default_instance( ) {
    return reinterpret_cast<const Profile_Adjacents *>(
        &_Profile_Adjacents_default_instance_);
  }

  static constexpr int kIndexInFileMessages =
      1;

  friend void swap( Profile_Adjacents &a, Profile_Adjacents &b ) {
    a.Swap( &b );
  }

  inline void Swap( Profile_Adjacents *other ) {
    if ( other == this ) return;
    if ( GetArena( ) == other->GetArena( )) {
      InternalSwap( other );
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap( this, other );
    }
  }

  void UnsafeArenaSwap( Profile_Adjacents *other ) {
    if ( other == this ) return;
        GOOGLE_DCHECK( GetArena( ) == other->GetArena( ));
    InternalSwap( other );
  }

  // implements Message ----------------------------------------------

  inline Profile_Adjacents *New( ) const final {
    return CreateMaybeMessage< Profile_Adjacents >( nullptr );
  }

  Profile_Adjacents *New( ::PROTOBUF_NAMESPACE_ID::Arena *arena ) const final {
    return CreateMaybeMessage< Profile_Adjacents >( arena );
  }

  void CopyFrom( const ::PROTOBUF_NAMESPACE_ID::Message &from ) final;

  void MergeFrom( const ::PROTOBUF_NAMESPACE_ID::Message &from ) final;

  void CopyFrom( const Profile_Adjacents &from );

  void MergeFrom( const Profile_Adjacents &from );

  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear( ) final;

  bool IsInitialized( ) const final;

  size_t ByteSizeLong( ) const final;

  const char *_InternalParse( const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx ) final;

  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream ) const final;

  int GetCachedSize( ) const final { return _cached_size_.Get( ); }

 private:
  inline void SharedCtor( );

  inline void SharedDtor( );

  void SetCachedSize( int size ) const final;

  void InternalSwap( Profile_Adjacents *other );

  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName( ) {
    return "graph_profile.Profile.Adjacents";
  }

 protected:
  explicit Profile_Adjacents( ::PROTOBUF_NAMESPACE_ID::Arena *arena );

 private:
  static void ArenaDtor( void *object );

  inline void RegisterArenaDtor( ::PROTOBUF_NAMESPACE_ID::Arena *arena );

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata( ) const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic( ) {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors( &::descriptor_table_graph_5fprofile_2eproto );
    return ::descriptor_table_graph_5fprofile_2eproto.file_level_metadata[ kIndexInFileMessages ];
  }

 public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccsFieldNumber = 2,
    kNodeFieldNumber = 1,
  };

  // repeated string succs = 2;
  int succs_size( ) const;

 private:
  int _internal_succs_size( ) const;

 public:
  void clear_succs( );

  const std::string &succs( int index ) const;

  std::string *mutable_succs( int index );

  void set_succs( int index, const std::string &value );

  void set_succs( int index, std::string &&value );

  void set_succs( int index, const char *value );

  void set_succs( int index, const char *value, size_t size );

  std::string *add_succs( );

  void add_succs( const std::string &value );

  void add_succs( std::string &&value );

  void add_succs( const char *value );

  void add_succs( const char *value, size_t size );

  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< std::string > &succs( ) const;

  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< std::string > *mutable_succs( );

 private:
  const std::string &_internal_succs( int index ) const;

  std::string *_internal_add_succs( );

 public:
  // string node = 1;
  void clear_node( );

  const std::string &node( ) const;

  void set_node( const std::string &value );

  void set_node( std::string &&value );

  void set_node( const char *value );

  void set_node( const char *value, size_t size );

  std::string *mutable_node( );

  std::string *release_node( );

  void set_allocated_node( std::string *node );

 private:
  const std::string &_internal_node( ) const;

  void _internal_set_node( const std::string &value );

  std::string *_internal_mutable_node( );

 public:

  // @@protoc_insertion_point(class_scope:graph_profile.Profile.Adjacents)
 private:
  class _Internal;

  template< typename T > friend
  class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< std::string > succs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_5fprofile_2eproto;
};
// -------------------------------------------------------------------

class Profile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph_profile.Profile) */ {
 public:
  inline Profile( ) : Profile( nullptr ) { }

  virtual ~Profile( );

  Profile( const Profile &from );

  Profile( Profile &&from ) noexcept
      : Profile( ) {
    *this = ::std::move( from );
  }

  inline Profile &operator=( const Profile &from ) {
    CopyFrom( from );
    return *this;
  }

  inline Profile &operator=( Profile &&from ) noexcept {
    if ( GetArena( ) == from.GetArena( )) {
      if ( this != &from ) InternalSwap( &from );
    } else {
      CopyFrom( from );
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor( ) {
    return GetDescriptor( );
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor( ) {
    return GetMetadataStatic( ).descriptor;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection( ) {
    return GetMetadataStatic( ).reflection;
  }

  static const Profile &default_instance( );

  static inline const Profile *internal_default_instance( ) {
    return reinterpret_cast<const Profile *>(
        &_Profile_default_instance_);
  }

  static constexpr int kIndexInFileMessages =
      2;

  friend void swap( Profile &a, Profile &b ) {
    a.Swap( &b );
  }

  inline void Swap( Profile *other ) {
    if ( other == this ) return;
    if ( GetArena( ) == other->GetArena( )) {
      InternalSwap( other );
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap( this, other );
    }
  }

  void UnsafeArenaSwap( Profile *other ) {
    if ( other == this ) return;
        GOOGLE_DCHECK( GetArena( ) == other->GetArena( ));
    InternalSwap( other );
  }

  // implements Message ----------------------------------------------

  inline Profile *New( ) const final {
    return CreateMaybeMessage< Profile >( nullptr );
  }

  Profile *New( ::PROTOBUF_NAMESPACE_ID::Arena *arena ) const final {
    return CreateMaybeMessage< Profile >( arena );
  }

  void CopyFrom( const ::PROTOBUF_NAMESPACE_ID::Message &from ) final;

  void MergeFrom( const ::PROTOBUF_NAMESPACE_ID::Message &from ) final;

  void CopyFrom( const Profile &from );

  void MergeFrom( const Profile &from );

  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear( ) final;

  bool IsInitialized( ) const final;

  size_t ByteSizeLong( ) const final;

  const char *_InternalParse( const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx ) final;

  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream ) const final;

  int GetCachedSize( ) const final { return _cached_size_.Get( ); }

 private:
  inline void SharedCtor( );

  inline void SharedDtor( );

  void SetCachedSize( int size ) const final;

  void InternalSwap( Profile *other );

  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName( ) {
    return "graph_profile.Profile";
  }

 protected:
  explicit Profile( ::PROTOBUF_NAMESPACE_ID::Arena *arena );

 private:
  static void ArenaDtor( void *object );

  inline void RegisterArenaDtor( ::PROTOBUF_NAMESPACE_ID::Arena *arena );

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata( ) const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic( ) {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors( &::descriptor_table_graph_5fprofile_2eproto );
    return ::descriptor_table_graph_5fprofile_2eproto.file_level_metadata[ kIndexInFileMessages ];
  }

 public:

  // nested types ----------------------------------------------------

  typedef Profile_Op Op;
  typedef Profile_Adjacents Adjacents;

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
    kGraphFieldNumber = 2,
  };

  // repeated .graph_profile.Profile.Op nodes = 1;
  int nodes_size( ) const;

 private:
  int _internal_nodes_size( ) const;

 public:
  void clear_nodes( );

  ::graph_profile::Profile_Op *mutable_nodes( int index );

  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_profile::Profile_Op > *
  mutable_nodes( );

 private:
  const ::graph_profile::Profile_Op &_internal_nodes( int index ) const;

  ::graph_profile::Profile_Op *_internal_add_nodes( );

 public:
  const ::graph_profile::Profile_Op &nodes( int index ) const;

  ::graph_profile::Profile_Op *add_nodes( );

  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_profile::Profile_Op > &
  nodes( ) const;

  // repeated .graph_profile.Profile.Adjacents graph = 2;
  int graph_size( ) const;

 private:
  int _internal_graph_size( ) const;

 public:
  void clear_graph( );

  ::graph_profile::Profile_Adjacents *mutable_graph( int index );

  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_profile::Profile_Adjacents > *
  mutable_graph( );

 private:
  const ::graph_profile::Profile_Adjacents &_internal_graph( int index ) const;

  ::graph_profile::Profile_Adjacents *_internal_add_graph( );

 public:
  const ::graph_profile::Profile_Adjacents &graph( int index ) const;

  ::graph_profile::Profile_Adjacents *add_graph( );

  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_profile::Profile_Adjacents > &
  graph( ) const;

  // @@protoc_insertion_point(class_scope:graph_profile.Profile)
 private:
  class _Internal;

  template< typename T > friend
  class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_profile::Profile_Op > nodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_profile::Profile_Adjacents > graph_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_5fprofile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Profile_Op

// string name = 1;
inline void Profile_Op::clear_name( ) {
  name_.ClearToEmpty( &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited( ), GetArena( ));
}

inline const std::string &Profile_Op::name( ) const {
  // @@protoc_insertion_point(field_get:graph_profile.Profile.Op.name)
  return _internal_name( );
}

inline void Profile_Op::set_name( const std::string &value ) {
  _internal_set_name( value );
  // @@protoc_insertion_point(field_set:graph_profile.Profile.Op.name)
}

inline std::string *Profile_Op::mutable_name( ) {
  // @@protoc_insertion_point(field_mutable:graph_profile.Profile.Op.name)
  return _internal_mutable_name( );
}

inline const std::string &Profile_Op::_internal_name( ) const {
  return name_.Get( );
}

inline void Profile_Op::_internal_set_name( const std::string &value ) {
  name_.Set( &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited( ), value, GetArena( ));
}

inline void Profile_Op::set_name( std::string &&value ) {
  name_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited( ), ::std::move( value ), GetArena( ));
  // @@protoc_insertion_point(field_set_rvalue:graph_profile.Profile.Op.name)
}

inline void Profile_Op::set_name( const char *value ) {
      GOOGLE_DCHECK( value != nullptr );
  name_.Set( &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited( ), ::std::string( value ),
             GetArena( ));
  // @@protoc_insertion_point(field_set_char:graph_profile.Profile.Op.name)
}

inline void Profile_Op::set_name( const char *value,
                                  size_t size ) {
  name_.Set( &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited( ), ::std::string(
      reinterpret_cast<const char *>(value), size ), GetArena( ));
  // @@protoc_insertion_point(field_set_pointer:graph_profile.Profile.Op.name)
}

inline std::string *Profile_Op::_internal_mutable_name( ) {
  return name_.Mutable( &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited( ), GetArena( ));
}

inline std::string *Profile_Op::release_name( ) {
  // @@protoc_insertion_point(field_release:graph_profile.Profile.Op.name)
  return name_.Release( &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited( ), GetArena( ));
}

inline void Profile_Op::set_allocated_name( std::string *name ) {
  if ( name != nullptr ) {
  } else {
  }
  name_.SetAllocated( &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited( ), name,
                      GetArena( ));
  // @@protoc_insertion_point(field_set_allocated:graph_profile.Profile.Op.name)
}

// uint32 comp_time_us = 2;
inline void Profile_Op::clear_comp_time_us( ) {
  comp_time_us_ = 0u;
}

inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile_Op::_internal_comp_time_us( ) const {
  return comp_time_us_;
}

inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile_Op::comp_time_us( ) const {
  // @@protoc_insertion_point(field_get:graph_profile.Profile.Op.comp_time_us)
  return _internal_comp_time_us( );
}

inline void Profile_Op::_internal_set_comp_time_us( ::PROTOBUF_NAMESPACE_ID::uint32 value ) {
  comp_time_us_ = value;
}

inline void Profile_Op::set_comp_time_us( ::PROTOBUF_NAMESPACE_ID::uint32 value ) {
  _internal_set_comp_time_us( value );
  // @@protoc_insertion_point(field_set:graph_profile.Profile.Op.comp_time_us)
}

// uint32 num_bytes = 3;
inline void Profile_Op::clear_num_bytes( ) {
  num_bytes_ = 0u;
}

inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile_Op::_internal_num_bytes( ) const {
  return num_bytes_;
}

inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile_Op::num_bytes( ) const {
  // @@protoc_insertion_point(field_get:graph_profile.Profile.Op.num_bytes)
  return _internal_num_bytes( );
}

inline void Profile_Op::_internal_set_num_bytes( ::PROTOBUF_NAMESPACE_ID::uint32 value ) {
  num_bytes_ = value;
}

inline void Profile_Op::set_num_bytes( ::PROTOBUF_NAMESPACE_ID::uint32 value ) {
  _internal_set_num_bytes( value );
  // @@protoc_insertion_point(field_set:graph_profile.Profile.Op.num_bytes)
}

// .graph_profile.Profile.Op.OpType op_type = 4;
inline void Profile_Op::clear_op_type( ) {
  op_type_ = 0;
}

inline ::graph_profile::Profile_Op_OpType Profile_Op::_internal_op_type( ) const {
  return static_cast< ::graph_profile::Profile_Op_OpType >(op_type_);
}

inline ::graph_profile::Profile_Op_OpType Profile_Op::op_type( ) const {
  // @@protoc_insertion_point(field_get:graph_profile.Profile.Op.op_type)
  return _internal_op_type( );
}

inline void Profile_Op::_internal_set_op_type( ::graph_profile::Profile_Op_OpType value ) {
  op_type_ = value;
}

inline void Profile_Op::set_op_type( ::graph_profile::Profile_Op_OpType value ) {
  _internal_set_op_type( value );
  // @@protoc_insertion_point(field_set:graph_profile.Profile.Op.op_type)
}

// .graph_profile.Profile.Op.MemType mem_type = 5;
inline void Profile_Op::clear_mem_type( ) {
  mem_type_ = 0;
}

inline ::graph_profile::Profile_Op_MemType Profile_Op::_internal_mem_type( ) const {
  return static_cast< ::graph_profile::Profile_Op_MemType >(mem_type_);
}

inline ::graph_profile::Profile_Op_MemType Profile_Op::mem_type( ) const {
  // @@protoc_insertion_point(field_get:graph_profile.Profile.Op.mem_type)
  return _internal_mem_type( );
}

inline void Profile_Op::_internal_set_mem_type( ::graph_profile::Profile_Op_MemType value ) {
  mem_type_ = value;
}

inline void Profile_Op::set_mem_type( ::graph_profile::Profile_Op_MemType value ) {
  _internal_set_mem_type( value );
  // @@protoc_insertion_point(field_set:graph_profile.Profile.Op.mem_type)
}

// uint32 output_bytes = 6;
inline void Profile_Op::clear_output_bytes( ) {
  output_bytes_ = 0u;
}

inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile_Op::_internal_output_bytes( ) const {
  return output_bytes_;
}

inline ::PROTOBUF_NAMESPACE_ID::uint32 Profile_Op::output_bytes( ) const {
  // @@protoc_insertion_point(field_get:graph_profile.Profile.Op.output_bytes)
  return _internal_output_bytes( );
}

inline void Profile_Op::_internal_set_output_bytes( ::PROTOBUF_NAMESPACE_ID::uint32 value ) {
  output_bytes_ = value;
}

inline void Profile_Op::set_output_bytes( ::PROTOBUF_NAMESPACE_ID::uint32 value ) {
  _internal_set_output_bytes( value );
  // @@protoc_insertion_point(field_set:graph_profile.Profile.Op.output_bytes)
}

// -------------------------------------------------------------------

// Profile_Adjacents

// string node = 1;
inline void Profile_Adjacents::clear_node( ) {
  node_.ClearToEmpty( &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited( ), GetArena( ));
}

inline const std::string &Profile_Adjacents::node( ) const {
  // @@protoc_insertion_point(field_get:graph_profile.Profile.Adjacents.node)
  return _internal_node( );
}

inline void Profile_Adjacents::set_node( const std::string &value ) {
  _internal_set_node( value );
  // @@protoc_insertion_point(field_set:graph_profile.Profile.Adjacents.node)
}

inline std::string *Profile_Adjacents::mutable_node( ) {
  // @@protoc_insertion_point(field_mutable:graph_profile.Profile.Adjacents.node)
  return _internal_mutable_node( );
}

inline const std::string &Profile_Adjacents::_internal_node( ) const {
  return node_.Get( );
}

inline void Profile_Adjacents::_internal_set_node( const std::string &value ) {
  node_.Set( &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited( ), value, GetArena( ));
}

inline void Profile_Adjacents::set_node( std::string &&value ) {
  node_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited( ), ::std::move( value ), GetArena( ));
  // @@protoc_insertion_point(field_set_rvalue:graph_profile.Profile.Adjacents.node)
}

inline void Profile_Adjacents::set_node( const char *value ) {
      GOOGLE_DCHECK( value != nullptr );
  node_.Set( &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited( ), ::std::string( value ),
             GetArena( ));
  // @@protoc_insertion_point(field_set_char:graph_profile.Profile.Adjacents.node)
}

inline void Profile_Adjacents::set_node( const char *value,
                                         size_t size ) {
  node_.Set( &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited( ), ::std::string(
      reinterpret_cast<const char *>(value), size ), GetArena( ));
  // @@protoc_insertion_point(field_set_pointer:graph_profile.Profile.Adjacents.node)
}

inline std::string *Profile_Adjacents::_internal_mutable_node( ) {
  return node_.Mutable( &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited( ), GetArena( ));
}

inline std::string *Profile_Adjacents::release_node( ) {
  // @@protoc_insertion_point(field_release:graph_profile.Profile.Adjacents.node)
  return node_.Release( &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited( ), GetArena( ));
}

inline void Profile_Adjacents::set_allocated_node( std::string *node ) {
  if ( node != nullptr ) {
  } else {
  }
  node_.SetAllocated( &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited( ), node,
                      GetArena( ));
  // @@protoc_insertion_point(field_set_allocated:graph_profile.Profile.Adjacents.node)
}

// repeated string succs = 2;
inline int Profile_Adjacents::_internal_succs_size( ) const {
  return succs_.size( );
}

inline int Profile_Adjacents::succs_size( ) const {
  return _internal_succs_size( );
}

inline void Profile_Adjacents::clear_succs( ) {
  succs_.Clear( );
}

inline std::string *Profile_Adjacents::add_succs( ) {
  // @@protoc_insertion_point(field_add_mutable:graph_profile.Profile.Adjacents.succs)
  return _internal_add_succs( );
}

inline const std::string &Profile_Adjacents::_internal_succs( int index ) const {
  return succs_.Get( index );
}

inline const std::string &Profile_Adjacents::succs( int index ) const {
  // @@protoc_insertion_point(field_get:graph_profile.Profile.Adjacents.succs)
  return _internal_succs( index );
}

inline std::string *Profile_Adjacents::mutable_succs( int index ) {
  // @@protoc_insertion_point(field_mutable:graph_profile.Profile.Adjacents.succs)
  return succs_.Mutable( index );
}

inline void Profile_Adjacents::set_succs( int index, const std::string &value ) {
  // @@protoc_insertion_point(field_set:graph_profile.Profile.Adjacents.succs)
  succs_.Mutable( index )->assign( value );
}

inline void Profile_Adjacents::set_succs( int index, std::string &&value ) {
  // @@protoc_insertion_point(field_set:graph_profile.Profile.Adjacents.succs)
  succs_.Mutable( index )->assign( std::move( value ));
}

inline void Profile_Adjacents::set_succs( int index, const char *value ) {
      GOOGLE_DCHECK( value != nullptr );
  succs_.Mutable( index )->assign( value );
  // @@protoc_insertion_point(field_set_char:graph_profile.Profile.Adjacents.succs)
}

inline void Profile_Adjacents::set_succs( int index, const char *value, size_t size ) {
  succs_.Mutable( index )->assign(
      reinterpret_cast<const char *>(value), size );
  // @@protoc_insertion_point(field_set_pointer:graph_profile.Profile.Adjacents.succs)
}

inline std::string *Profile_Adjacents::_internal_add_succs( ) {
  return succs_.Add( );
}

inline void Profile_Adjacents::add_succs( const std::string &value ) {
  succs_.Add( )->assign( value );
  // @@protoc_insertion_point(field_add:graph_profile.Profile.Adjacents.succs)
}

inline void Profile_Adjacents::add_succs( std::string &&value ) {
  succs_.Add( std::move( value ));
  // @@protoc_insertion_point(field_add:graph_profile.Profile.Adjacents.succs)
}

inline void Profile_Adjacents::add_succs( const char *value ) {
      GOOGLE_DCHECK( value != nullptr );
  succs_.Add( )->assign( value );
  // @@protoc_insertion_point(field_add_char:graph_profile.Profile.Adjacents.succs)
}

inline void Profile_Adjacents::add_succs( const char *value, size_t size ) {
  succs_.Add( )->assign( reinterpret_cast<const char *>(value), size );
  // @@protoc_insertion_point(field_add_pointer:graph_profile.Profile.Adjacents.succs)
}

inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< std::string > &
Profile_Adjacents::succs( ) const {
  // @@protoc_insertion_point(field_list:graph_profile.Profile.Adjacents.succs)
  return succs_;
}

inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< std::string > *
Profile_Adjacents::mutable_succs( ) {
  // @@protoc_insertion_point(field_mutable_list:graph_profile.Profile.Adjacents.succs)
  return &succs_;
}

// -------------------------------------------------------------------

// Profile

// repeated .graph_profile.Profile.Op nodes = 1;
inline int Profile::_internal_nodes_size( ) const {
  return nodes_.size( );
}

inline int Profile::nodes_size( ) const {
  return _internal_nodes_size( );
}

inline void Profile::clear_nodes( ) {
  nodes_.Clear( );
}

inline ::graph_profile::Profile_Op *Profile::mutable_nodes( int index ) {
  // @@protoc_insertion_point(field_mutable:graph_profile.Profile.nodes)
  return nodes_.Mutable( index );
}

inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_profile::Profile_Op > *
Profile::mutable_nodes( ) {
  // @@protoc_insertion_point(field_mutable_list:graph_profile.Profile.nodes)
  return &nodes_;
}

inline const ::graph_profile::Profile_Op &Profile::_internal_nodes( int index ) const {
  return nodes_.Get( index );
}

inline const ::graph_profile::Profile_Op &Profile::nodes( int index ) const {
  // @@protoc_insertion_point(field_get:graph_profile.Profile.nodes)
  return _internal_nodes( index );
}

inline ::graph_profile::Profile_Op *Profile::_internal_add_nodes( ) {
  return nodes_.Add( );
}

inline ::graph_profile::Profile_Op *Profile::add_nodes( ) {
  // @@protoc_insertion_point(field_add:graph_profile.Profile.nodes)
  return _internal_add_nodes( );
}

inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_profile::Profile_Op > &
Profile::nodes( ) const {
  // @@protoc_insertion_point(field_list:graph_profile.Profile.nodes)
  return nodes_;
}

// repeated .graph_profile.Profile.Adjacents graph = 2;
inline int Profile::_internal_graph_size( ) const {
  return graph_.size( );
}

inline int Profile::graph_size( ) const {
  return _internal_graph_size( );
}

inline void Profile::clear_graph( ) {
  graph_.Clear( );
}

inline ::graph_profile::Profile_Adjacents *Profile::mutable_graph( int index ) {
  // @@protoc_insertion_point(field_mutable:graph_profile.Profile.graph)
  return graph_.Mutable( index );
}

inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_profile::Profile_Adjacents > *
Profile::mutable_graph( ) {
  // @@protoc_insertion_point(field_mutable_list:graph_profile.Profile.graph)
  return &graph_;
}

inline const ::graph_profile::Profile_Adjacents &Profile::_internal_graph( int index ) const {
  return graph_.Get( index );
}

inline const ::graph_profile::Profile_Adjacents &Profile::graph( int index ) const {
  // @@protoc_insertion_point(field_get:graph_profile.Profile.graph)
  return _internal_graph( index );
}

inline ::graph_profile::Profile_Adjacents *Profile::_internal_add_graph( ) {
  return graph_.Add( );
}

inline ::graph_profile::Profile_Adjacents *Profile::add_graph( ) {
  // @@protoc_insertion_point(field_add:graph_profile.Profile.graph)
  return _internal_add_graph( );
}

inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_profile::Profile_Adjacents > &
Profile::graph( ) const {
  // @@protoc_insertion_point(field_list:graph_profile.Profile.graph)
  return graph_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace graph_profile

PROTOBUF_NAMESPACE_OPEN
template< >
struct is_proto_enum< ::graph_profile::Profile_Op_MemType > : ::std::true_type { };

template< >
inline const EnumDescriptor *GetEnumDescriptor< ::graph_profile::Profile_Op_MemType >( ) {
  return ::graph_profile::Profile_Op_MemType_descriptor( );
}

template< >
struct is_proto_enum< ::graph_profile::Profile_Op_OpType > : ::std::true_type { };

template< >
inline const EnumDescriptor *GetEnumDescriptor< ::graph_profile::Profile_Op_OpType >( ) {
  return ::graph_profile::Profile_Op_OpType_descriptor( );
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>

#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_graph_5fprofile_2eproto
