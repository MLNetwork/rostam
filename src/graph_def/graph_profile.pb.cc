// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph_profile.proto

#include "graph_profile.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_graph_5fprofile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Profile_Adjacents_graph_5fprofile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_graph_5fprofile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Profile_Op_graph_5fprofile_2eproto;
namespace graph_profile {
class Profile_OpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Profile_Op> _instance;
} _Profile_Op_default_instance_;
class Profile_AdjacentsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Profile_Adjacents> _instance;
} _Profile_Adjacents_default_instance_;
class ProfileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Profile> _instance;
} _Profile_default_instance_;
}  // namespace graph_profile
static void InitDefaultsscc_info_Profile_graph_5fprofile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::graph_profile::_Profile_default_instance_;
    new (ptr) ::graph_profile::Profile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Profile_graph_5fprofile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Profile_graph_5fprofile_2eproto}, {
      &scc_info_Profile_Op_graph_5fprofile_2eproto.base,
      &scc_info_Profile_Adjacents_graph_5fprofile_2eproto.base,}};

static void InitDefaultsscc_info_Profile_Adjacents_graph_5fprofile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::graph_profile::_Profile_Adjacents_default_instance_;
    new (ptr) ::graph_profile::Profile_Adjacents();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Profile_Adjacents_graph_5fprofile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Profile_Adjacents_graph_5fprofile_2eproto}, {}};

static void InitDefaultsscc_info_Profile_Op_graph_5fprofile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::graph_profile::_Profile_Op_default_instance_;
    new (ptr) ::graph_profile::Profile_Op();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Profile_Op_graph_5fprofile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Profile_Op_graph_5fprofile_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_graph_5fprofile_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_graph_5fprofile_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_graph_5fprofile_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_graph_5fprofile_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::graph_profile::Profile_Op, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::graph_profile::Profile_Op, name_),
  PROTOBUF_FIELD_OFFSET(::graph_profile::Profile_Op, comp_time_us_),
  PROTOBUF_FIELD_OFFSET(::graph_profile::Profile_Op, num_bytes_),
  PROTOBUF_FIELD_OFFSET(::graph_profile::Profile_Op, op_type_),
  PROTOBUF_FIELD_OFFSET(::graph_profile::Profile_Op, mem_type_),
  PROTOBUF_FIELD_OFFSET(::graph_profile::Profile_Op, output_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::graph_profile::Profile_Adjacents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::graph_profile::Profile_Adjacents, node_),
  PROTOBUF_FIELD_OFFSET(::graph_profile::Profile_Adjacents, succs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::graph_profile::Profile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::graph_profile::Profile, nodes_),
  PROTOBUF_FIELD_OFFSET(::graph_profile::Profile, graph_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::graph_profile::Profile_Op)},
  { 11, -1, sizeof(::graph_profile::Profile_Adjacents)},
  { 18, -1, sizeof(::graph_profile::Profile)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::graph_profile::_Profile_Op_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::graph_profile::_Profile_Adjacents_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::graph_profile::_Profile_default_instance_),
};

const char descriptor_table_protodef_graph_5fprofile_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023graph_profile.proto\022\rgraph_profile\"\316\003\n"
  "\007Profile\022(\n\005nodes\030\001 \003(\0132\031.graph_profile."
  "Profile.Op\022/\n\005graph\030\002 \003(\0132 .graph_profil"
  "e.Profile.Adjacents\032\275\002\n\002Op\022\014\n\004name\030\001 \001(\t"
  "\022\024\n\014comp_time_us\030\002 \001(\r\022\021\n\tnum_bytes\030\003 \001("
  "\r\0221\n\007op_type\030\004 \001(\0162 .graph_profile.Profi"
  "le.Op.OpType\0223\n\010mem_type\030\005 \001(\0162!.graph_p"
  "rofile.Profile.Op.MemType\022\024\n\014output_byte"
  "s\030\006 \001(\r\"H\n\007MemType\022\n\n\006TENSOR\020\000\022\021\n\rWRITEV"
  "ARIABLE\020\001\022\020\n\014READVARIABLE\020\002\022\014\n\010CONSTANT\020"
  "\003\"8\n\006OpType\022\013\n\007COMPUTE\020\000\022\n\n\006MEMORY\020\001\022\025\n\021"
  "CONTROLDEPENDENCY\020\002\032(\n\tAdjacents\022\014\n\004node"
  "\030\001 \001(\t\022\r\n\005succs\030\002 \003(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_graph_5fprofile_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_graph_5fprofile_2eproto_sccs[3] = {
  &scc_info_Profile_graph_5fprofile_2eproto.base,
  &scc_info_Profile_Adjacents_graph_5fprofile_2eproto.base,
  &scc_info_Profile_Op_graph_5fprofile_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_graph_5fprofile_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_graph_5fprofile_2eproto = {
  false, false, descriptor_table_protodef_graph_5fprofile_2eproto, "graph_profile.proto", 509,
  &descriptor_table_graph_5fprofile_2eproto_once, descriptor_table_graph_5fprofile_2eproto_sccs, descriptor_table_graph_5fprofile_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_graph_5fprofile_2eproto::offsets,
  file_level_metadata_graph_5fprofile_2eproto, 3, file_level_enum_descriptors_graph_5fprofile_2eproto, file_level_service_descriptors_graph_5fprofile_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_graph_5fprofile_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_graph_5fprofile_2eproto)), true);
namespace graph_profile {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Profile_Op_MemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_graph_5fprofile_2eproto);
  return file_level_enum_descriptors_graph_5fprofile_2eproto[0];
}
bool Profile_Op_MemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Profile_Op_MemType Profile_Op::TENSOR;
constexpr Profile_Op_MemType Profile_Op::WRITEVARIABLE;
constexpr Profile_Op_MemType Profile_Op::READVARIABLE;
constexpr Profile_Op_MemType Profile_Op::CONSTANT;
constexpr Profile_Op_MemType Profile_Op::MemType_MIN;
constexpr Profile_Op_MemType Profile_Op::MemType_MAX;
constexpr int Profile_Op::MemType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Profile_Op_OpType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_graph_5fprofile_2eproto);
  return file_level_enum_descriptors_graph_5fprofile_2eproto[1];
}
bool Profile_Op_OpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Profile_Op_OpType Profile_Op::COMPUTE;
constexpr Profile_Op_OpType Profile_Op::MEMORY;
constexpr Profile_Op_OpType Profile_Op::CONTROLDEPENDENCY;
constexpr Profile_Op_OpType Profile_Op::OpType_MIN;
constexpr Profile_Op_OpType Profile_Op::OpType_MAX;
constexpr int Profile_Op::OpType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Profile_Op::_Internal {
 public:
};

Profile_Op::Profile_Op(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:graph_profile.Profile.Op)
}
Profile_Op::Profile_Op(const Profile_Op& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&comp_time_us_, &from.comp_time_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_bytes_) -
    reinterpret_cast<char*>(&comp_time_us_)) + sizeof(output_bytes_));
  // @@protoc_insertion_point(copy_constructor:graph_profile.Profile.Op)
}

void Profile_Op::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Profile_Op_graph_5fprofile_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&comp_time_us_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&output_bytes_) -
      reinterpret_cast<char*>(&comp_time_us_)) + sizeof(output_bytes_));
}

Profile_Op::~Profile_Op() {
  // @@protoc_insertion_point(destructor:graph_profile.Profile.Op)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Profile_Op::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Profile_Op::ArenaDtor(void* object) {
  Profile_Op* _this = reinterpret_cast< Profile_Op* >(object);
  (void)_this;
}
void Profile_Op::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Profile_Op::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Profile_Op& Profile_Op::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Profile_Op_graph_5fprofile_2eproto.base);
  return *internal_default_instance();
}


void Profile_Op::Clear() {
// @@protoc_insertion_point(message_clear_start:graph_profile.Profile.Op)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&comp_time_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_bytes_) -
      reinterpret_cast<char*>(&comp_time_us_)) + sizeof(output_bytes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Profile_Op::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "graph_profile.Profile.Op.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 comp_time_us = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          comp_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .graph_profile.Profile.Op.OpType op_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op_type(static_cast<::graph_profile::Profile_Op_OpType>(val));
        } else goto handle_unusual;
        continue;
      // .graph_profile.Profile.Op.MemType mem_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mem_type(static_cast<::graph_profile::Profile_Op_MemType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 output_bytes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          output_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Profile_Op::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:graph_profile.Profile.Op)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "graph_profile.Profile.Op.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 comp_time_us = 2;
  if (this->comp_time_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_comp_time_us(), target);
  }

  // uint32 num_bytes = 3;
  if (this->num_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_bytes(), target);
  }

  // .graph_profile.Profile.Op.OpType op_type = 4;
  if (this->op_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_op_type(), target);
  }

  // .graph_profile.Profile.Op.MemType mem_type = 5;
  if (this->mem_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_mem_type(), target);
  }

  // uint32 output_bytes = 6;
  if (this->output_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_output_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:graph_profile.Profile.Op)
  return target;
}

size_t Profile_Op::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:graph_profile.Profile.Op)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 comp_time_us = 2;
  if (this->comp_time_us() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_comp_time_us());
  }

  // uint32 num_bytes = 3;
  if (this->num_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_bytes());
  }

  // .graph_profile.Profile.Op.OpType op_type = 4;
  if (this->op_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op_type());
  }

  // .graph_profile.Profile.Op.MemType mem_type = 5;
  if (this->mem_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mem_type());
  }

  // uint32 output_bytes = 6;
  if (this->output_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_output_bytes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Profile_Op::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:graph_profile.Profile.Op)
  GOOGLE_DCHECK_NE(&from, this);
  const Profile_Op* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Profile_Op>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:graph_profile.Profile.Op)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:graph_profile.Profile.Op)
    MergeFrom(*source);
  }
}

void Profile_Op::MergeFrom(const Profile_Op& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:graph_profile.Profile.Op)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.comp_time_us() != 0) {
    _internal_set_comp_time_us(from._internal_comp_time_us());
  }
  if (from.num_bytes() != 0) {
    _internal_set_num_bytes(from._internal_num_bytes());
  }
  if (from.op_type() != 0) {
    _internal_set_op_type(from._internal_op_type());
  }
  if (from.mem_type() != 0) {
    _internal_set_mem_type(from._internal_mem_type());
  }
  if (from.output_bytes() != 0) {
    _internal_set_output_bytes(from._internal_output_bytes());
  }
}

void Profile_Op::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:graph_profile.Profile.Op)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Profile_Op::CopyFrom(const Profile_Op& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:graph_profile.Profile.Op)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profile_Op::IsInitialized() const {
  return true;
}

void Profile_Op::InternalSwap(Profile_Op* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Profile_Op, output_bytes_)
      + sizeof(Profile_Op::output_bytes_)
      - PROTOBUF_FIELD_OFFSET(Profile_Op, comp_time_us_)>(
          reinterpret_cast<char*>(&comp_time_us_),
          reinterpret_cast<char*>(&other->comp_time_us_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Profile_Op::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Profile_Adjacents::_Internal {
 public:
};

Profile_Adjacents::Profile_Adjacents(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  succs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:graph_profile.Profile.Adjacents)
}
Profile_Adjacents::Profile_Adjacents(const Profile_Adjacents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      succs_(from.succs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node().empty()) {
    node_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:graph_profile.Profile.Adjacents)
}

void Profile_Adjacents::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Profile_Adjacents_graph_5fprofile_2eproto.base);
  node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Profile_Adjacents::~Profile_Adjacents() {
  // @@protoc_insertion_point(destructor:graph_profile.Profile.Adjacents)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Profile_Adjacents::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  node_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Profile_Adjacents::ArenaDtor(void* object) {
  Profile_Adjacents* _this = reinterpret_cast< Profile_Adjacents* >(object);
  (void)_this;
}
void Profile_Adjacents::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Profile_Adjacents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Profile_Adjacents& Profile_Adjacents::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Profile_Adjacents_graph_5fprofile_2eproto.base);
  return *internal_default_instance();
}


void Profile_Adjacents::Clear() {
// @@protoc_insertion_point(message_clear_start:graph_profile.Profile.Adjacents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  succs_.Clear();
  node_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Profile_Adjacents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_node();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "graph_profile.Profile.Adjacents.node"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string succs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_succs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "graph_profile.Profile.Adjacents.succs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Profile_Adjacents::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:graph_profile.Profile.Adjacents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node = 1;
  if (this->node().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node().data(), static_cast<int>(this->_internal_node().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "graph_profile.Profile.Adjacents.node");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_node(), target);
  }

  // repeated string succs = 2;
  for (int i = 0, n = this->_internal_succs_size(); i < n; i++) {
    const auto& s = this->_internal_succs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "graph_profile.Profile.Adjacents.succs");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:graph_profile.Profile.Adjacents)
  return target;
}

size_t Profile_Adjacents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:graph_profile.Profile.Adjacents)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string succs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(succs_.size());
  for (int i = 0, n = succs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      succs_.Get(i));
  }

  // string node = 1;
  if (this->node().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Profile_Adjacents::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:graph_profile.Profile.Adjacents)
  GOOGLE_DCHECK_NE(&from, this);
  const Profile_Adjacents* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Profile_Adjacents>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:graph_profile.Profile.Adjacents)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:graph_profile.Profile.Adjacents)
    MergeFrom(*source);
  }
}

void Profile_Adjacents::MergeFrom(const Profile_Adjacents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:graph_profile.Profile.Adjacents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  succs_.MergeFrom(from.succs_);
  if (from.node().size() > 0) {
    _internal_set_node(from._internal_node());
  }
}

void Profile_Adjacents::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:graph_profile.Profile.Adjacents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Profile_Adjacents::CopyFrom(const Profile_Adjacents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:graph_profile.Profile.Adjacents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profile_Adjacents::IsInitialized() const {
  return true;
}

void Profile_Adjacents::InternalSwap(Profile_Adjacents* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  succs_.InternalSwap(&other->succs_);
  node_.Swap(&other->node_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Profile_Adjacents::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Profile::_Internal {
 public:
};

Profile::Profile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nodes_(arena),
  graph_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:graph_profile.Profile)
}
Profile::Profile(const Profile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nodes_(from.nodes_),
      graph_(from.graph_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:graph_profile.Profile)
}

void Profile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Profile_graph_5fprofile_2eproto.base);
}

Profile::~Profile() {
  // @@protoc_insertion_point(destructor:graph_profile.Profile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Profile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Profile::ArenaDtor(void* object) {
  Profile* _this = reinterpret_cast< Profile* >(object);
  (void)_this;
}
void Profile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Profile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Profile& Profile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Profile_graph_5fprofile_2eproto.base);
  return *internal_default_instance();
}


void Profile::Clear() {
// @@protoc_insertion_point(message_clear_start:graph_profile.Profile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  graph_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Profile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .graph_profile.Profile.Op nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .graph_profile.Profile.Adjacents graph = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_graph(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Profile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:graph_profile.Profile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .graph_profile.Profile.Op nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nodes(i), target, stream);
  }

  // repeated .graph_profile.Profile.Adjacents graph = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_graph_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_graph(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:graph_profile.Profile)
  return target;
}

size_t Profile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:graph_profile.Profile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .graph_profile.Profile.Op nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .graph_profile.Profile.Adjacents graph = 2;
  total_size += 1UL * this->_internal_graph_size();
  for (const auto& msg : this->graph_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Profile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:graph_profile.Profile)
  GOOGLE_DCHECK_NE(&from, this);
  const Profile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Profile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:graph_profile.Profile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:graph_profile.Profile)
    MergeFrom(*source);
  }
}

void Profile::MergeFrom(const Profile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:graph_profile.Profile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  graph_.MergeFrom(from.graph_);
}

void Profile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:graph_profile.Profile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Profile::CopyFrom(const Profile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:graph_profile.Profile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profile::IsInitialized() const {
  return true;
}

void Profile::InternalSwap(Profile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
  graph_.InternalSwap(&other->graph_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Profile::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace graph_profile
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::graph_profile::Profile_Op* Arena::CreateMaybeMessage< ::graph_profile::Profile_Op >(Arena* arena) {
  return Arena::CreateMessageInternal< ::graph_profile::Profile_Op >(arena);
}
template<> PROTOBUF_NOINLINE ::graph_profile::Profile_Adjacents* Arena::CreateMaybeMessage< ::graph_profile::Profile_Adjacents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::graph_profile::Profile_Adjacents >(arena);
}
template<> PROTOBUF_NOINLINE ::graph_profile::Profile* Arena::CreateMaybeMessage< ::graph_profile::Profile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::graph_profile::Profile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
